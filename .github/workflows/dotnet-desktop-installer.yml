name: .NET Desktop Installer

on:
  release:
    types: [published]

jobs:
  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: ScriptNotepad.sln
      App_Project_Directory: ScriptNotepad
      App_Project_Path: ScriptNotepad\ScriptNotepad.csproj
      AppInstaller_Project_Path: InstallerBaseWixSharp\InstallerBaseWixSharp.csproj
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    # Install the .NET 6 workload
    - name: Install .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

   # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:App_Project_Path /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the ScriptNotepad installer project
    - name: Build the ScriptNotepad project
      run: msbuild $env:App_Project_Path /p:Configuration=$env:Configuration

    # Build the ScriptNotepad project
    - name: Build the ScriptNotepad project
      run: msbuild $env:AppInstaller_Project_Path /p:Configuration=$env:Configuration
      
    - name: Publish the installer to the release tag
      run: |
        $files = Get-ChildItem $Env:CIRCLE_WORKING_DIRECTORY -r -Filter *ScriptNotepad*.msi # use the mask to discard possible third party packages..
        for ($i = 0; $i -lt $files.Count; $i++) 
        {
            $file = $files[$i].FullName
            Write-Output (-join("Installer package:", $file, "."))
        }
