/*
MIT License

Copyright(c) 2019 Petteri Kautonen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

--VER 0
CREATE TABLE IF NOT EXISTS DBVERSION(DBVERSION INTEGER NOT NULL);
--ENDVER 0

--VER 1
CREATE TABLE IF NOT EXISTS SOFTWARE_LICENSE(
  LICENSE TEXT NULL
);

INSERT INTO SOFTWARE_LICENSE(LICENSE) VALUES('
MIT License

Copyright(c) 2019 Petteri Kautonen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.');

--ENDVER 1

--VER 2
CREATE TABLE IF NOT EXISTS DBFILE_SAVE
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  EXISTS_INFILESYS INTEGER NOT NULL, -- an indicator if the file exists in the file system..
  FILENAME_FULL TEXT NOT NULL, -- the full file name with path..
  FILENAME TEXT NOT NULL, -- the file name without path..
  FILEPATH TEXT NOT NULL, -- the full path for the file..
  FILESYS_MODIFIED TEXT NOT NULL, -- when the file was modified in the file system, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  DB_MODIFIED TEXT NOT NULL, -- when the file was modified in the database, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  LEXER_CODE INTEGER NOT NULL, -- a lexer number with the ScintillaNET.. 
  FILE_CONTENTS BLOB NOT NULL, -- the file contents..
  VISIBILITY_ORDER INTEGER NOT NULL, -- the index of the file in a tabbed control..
  ISACTIVE INTEGER NOT NULL, -- an indicator if the file is activated in the tab control..
  SESSIONID INTEGER NOT NULL, -- an id for a session of the file..
  ISHISTORY INTEGER NOT NULL -- an indicator if the file is a history entry..
);
--ENDVER 2

--VER 3
CREATE TABLE IF NOT EXISTS RECENT_FILES -- a table for the document history..
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  FILENAME_FULL TEXT NOT NULL, -- the full file name with path..
  FILENAME TEXT NOT NULL, -- the file name without path..
  FILEPATH TEXT NOT NULL, -- the full path for the file..
  CLOSED_DATETIME TEXT NOT NULL, -- when the file was closed in the software, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  SESSIONID INTEGER NOT NULL, -- an id for a session of the file..
  REFERENCEID INTEGER(8) NULL -- a reference to a file id in the DBFILE_SAVE table, can be null..
);

CREATE TABLE IF NOT EXISTS CODE_SNIPPETS -- a table to save C# script snippets..
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  SCRIPT_CONTENTS TEXT NOT NULL,
  SCRIPT_NAME TEXT NOT NULL,
  MODIFIED TEXT NOT NULL, -- when script snippet was modified, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  SCRIPT_LANGUAGE INTEGER NOT NULL DEFAULT 0 -- the language of the script - if other than C# will ever be supported..
);
--ENDVER 3

--VER 4
CREATE TABLE IF NOT EXISTS SESSION_NAME -- a table to save session names to the database..
(
  SESSIONID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, -- a session id..
  SESSIONNAME TEXT NOT NULL UNIQUE COLLATE NOCASE -- a name assigned for the session..
);

INSERT INTO SESSION_NAME(SESSIONNAME) VALUES('Default'); -- insert the default session in to the database..
--ENDVER 4

--VER 5
ALTER TABLE DBFILE_SAVE RENAME TO DBFILE_SAVE_OLD;
CREATE TABLE IF NOT EXISTS DBFILE_SAVE
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  EXISTS_INFILESYS INTEGER NOT NULL, -- an indicator if the file exists in the file system..
  FILENAME_FULL TEXT NOT NULL, -- the full file name with path..
  FILENAME TEXT NOT NULL, -- the file name without path..
  FILEPATH TEXT NOT NULL, -- the full path for the file..
  FILESYS_MODIFIED TEXT NOT NULL, -- when the file was modified in the file system, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  FILESYS_SAVED TEXT NOT NULL, -- when the file was saved to file system by the software, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  DB_MODIFIED TEXT NOT NULL, -- when the file was modified in the database, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  LEXER_CODE INTEGER NOT NULL, -- a lexer number with the ScintillaNET.. 
  FILE_CONTENTS BLOB NOT NULL, -- the file contents..
  VISIBILITY_ORDER INTEGER NOT NULL, -- the index of the file in a tabbed control..
  ISACTIVE INTEGER NOT NULL, -- an indicator if the file is activated in the tab control..
  SESSIONID INTEGER NOT NULL, -- an id for a session of the file..
  ISHISTORY INTEGER NOT NULL -- an indicator if the file is a history entry..
);

INSERT INTO DBFILE_SAVE 
(ID, EXISTS_INFILESYS, FILENAME_FULL, FILENAME, FILEPATH, FILESYS_MODIFIED, FILESYS_SAVED, 
DB_MODIFIED, LEXER_CODE, FILE_CONTENTS, VISIBILITY_ORDER, ISACTIVE, SESSIONID, ISHISTORY)
SELECT ID, EXISTS_INFILESYS, FILENAME_FULL, FILENAME, FILEPATH, FILESYS_MODIFIED, '0000-00-00 00:00:00.000', 
DB_MODIFIED, LEXER_CODE, FILE_CONTENTS, VISIBILITY_ORDER, ISACTIVE, SESSIONID, ISHISTORY FROM DBFILE_SAVE_OLD;

DROP TABLE DBFILE_SAVE_OLD;
--ENDVER 5

--VER 6
UPDATE DBFILE_SAVE SET FILESYS_SAVED = FILESYS_MODIFIED WHERE EXISTS_INFILESYS = 1;
--ENDVER 6

--VER 7
UPDATE DBFILE_SAVE SET DB_MODIFIED = FILESYS_MODIFIED WHERE EXISTS_INFILESYS = 1;
--ENDVER 7 

--VER 8

DROP TABLE CODE_SNIPPETS;

CREATE TABLE IF NOT EXISTS CODE_SNIPPETS -- a table to save C# script snippets..
(
  ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  SCRIPT_CONTENTS TEXT NOT NULL,
  SCRIPT_NAME TEXT NOT NULL,
  MODIFIED TEXT NOT NULL, -- when script snippet was modified, C# string format: yyyy-MM-dd HH':'mm':'ss.fff
  SCRIPT_TYPE INTEGER NOT NULL, --0 means text manipulation, 1 means lines manipulatiom
  SCRIPT_LANGUAGE INTEGER NOT NULL DEFAULT 0 -- the language of the script - if other than C# will ever be supported..
);

INSERT INTO CODE_SNIPPETS (SCRIPT_CONTENTS, SCRIPT_NAME, MODIFIED, SCRIPT_TYPE)
SELECT
'#region Usings
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
#endregion


public class ManipulateLineLines
{
    public static string Evaluate(List<string> fileLines)
    {
        string result = string.Empty;
        // replace text from the file''s lines..
        for (int i = 0; i < fileLines.Count; i++)
        {
           fileLines[i] = fileLines[i].Replace("value1", "value2");
        }

        result = string.Concat(fileLines); // concatenate the result lines.. 
        return result;
    }
}', 'Simple replace script', '2019-01-21 08:00:00.000', 1;


INSERT INTO CODE_SNIPPETS (SCRIPT_CONTENTS, SCRIPT_NAME, MODIFIED, SCRIPT_TYPE)
SELECT
'#region Usings
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
#endregion


public class ManipulateText
{
    public static string Evaluate(string fileContents)
    {
        // convert Windows line endings to Linux / Unix line endings..
        fileContents = fileContents.Replace("\r\n", "\n"); 
        return fileContents;
    }
}', 'Simple line ending change script', '2019-01-21 08:00:00.000', 0;

--ENDVER 8